&pinctrl {
    spi_master_default: spi_master_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 2, 1)>,
                    <NRF_PSEL(SPIM_MOSI, 2, 2)>,
                    <NRF_PSEL(SPIM_MISO, 2, 4)>;
        };
    };
    spi_master_sleep_alt: spi_master_sleep_alt {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 2, 1)>,
                    <NRF_PSEL(SPIM_MOSI, 2, 2)>,
                    <NRF_PSEL(SPIM_MISO, 2, 4)>;
            low-power-enable;
        };
    };

    i2c21_default: i2c21_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 6)>,
                    <NRF_PSEL(TWIM_SCL, 1, 4)>;
            bias-pull-up;
        };
    };
    
    i2c21_sleep: i2c21_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 6)>,
                    <NRF_PSEL(TWIM_SCL, 1, 4)>;
            low-power-enable;
        };
    };

    i2c22_default: i2c22_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 7)>,
                    <NRF_PSEL(TWIM_SCL, 1, 8)>;
            bias-pull-up;
        };
    };
    
    i2c22_sleep: i2c22_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 1, 7)>,
                    <NRF_PSEL(TWIM_SCL, 1, 8)>;
            low-power-enable;
        };
    };
};

fpga_spi: &spi00 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi_master_default>;
    pinctrl-1 = <&spi_master_sleep_alt>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio2 3 GPIO_ACTIVE_LOW>;
    mx25r64: mx25r6435f@0 {
        status = "disabled";
    };
};

&i2c21 {
    status = "okay";
    pinctrl-0 = <&i2c21_default>;
    pinctrl-1 = <&i2c21_sleep>;
    pinctrl-names = "default", "sleep";
    zephyr,concat-buf-size = <128>;
    npix1: npix@40{
        compatible = "i2c-device";
        status = "okay";
        reg = < 0x40 >;
    };
};

&i2c22 {
    status = "okay";
    pinctrl-0 = <&i2c22_default>;
    pinctrl-1 = <&i2c22_sleep>;
    pinctrl-names = "default", "sleep";
    zephyr,concat-buf-size = <128>;
    npix2: npix@40{
        compatible = "i2c-device";
        status = "okay";
        reg = < 0x40 >;
    };
};

/ {
    chosen {
        zephyr,console = &uart30;
        zephyr,shell-uart = &uart30;
        zephyr,uart-mcumgr = &uart30;
    };

    app_gpios {
        compatible = "gpio-keys"; // Using gpio-keys compatible is common for simple GPIO inputs
                                  // Alternative: "simple-gpio-container" if no specific driver needed
        status = "okay";

        // Define the actual trigger pin node
        spi_trigger_pin_node: spi_trigger_pin {
            label = "SPI_Trigger_Input";
            gpios = <&gpio1 11 GPIO_ACTIVE_HIGH>; // Pin P1.11 (port gpio1, pin 11)
                                                 // GPIO_ACTIVE_HIGH indicates the logical high state,
                                                 // edge configuration (rising) is done in C code.
                                                 // Use GPIO_ACTIVE_LOW if a falling edge trigger is used.
        };
    };

    aliases {
        spi-trigger = &spi_trigger_pin_node;
    };
};

&uart20 {
    status = "disabled";
};
&uart30 {
    status = "okay";
};